//Interesting techniques here: Simulate returns in a procedural language and disassembling a for loop into ifs
1 -> Y:
0 -> M:
? -> A:
? -> B:
? -> C:
(A-B) / C -> D◢
Lbl 1:
If Y != C:
  Then B + YD -> X◢
  Goto 5:
  Lbl 2:
  XM+:
  Y + 1 -> Y:
  Goto 1:
IfEnd:
Y + 1 -> Y:
A -> X;
Goto 5:
Lbl 3:
X -> A:
B -> X:
Goto 5:
Lbl 4:
X -> B:
Goto 6:
Lbl 5:
/*Your function Here */ -> X:
If Y < C:
 Then Goto 2:
IfEnd:
If Y = (C + 1):
  Then Y + 1 -> Y:
  Goto 3:
IfEnd:
Goto 4:
Lbl 6:
A◢
B◢
D / 2 * (A + 2M + B)

//This may seem convoluted, but is actually fairly simple
//Lbl 5 is the function to trapezodial rule and a and b are the ranges
//We go to Lbl 5, which transforms X into the value of f(X)
//The if below it is for returning to the correct position
//As we can't goto in a loop (an annoying limitation), we simulate a while loop by using an if statement and goto(s)

  
